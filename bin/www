#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('finished.me:server')
const http = require('http')
const https = require('https')
const fs = require('fs')
const httpsPort = normalizePort(process.env.HTTPS_PORT || '443')
const httpPort = normalizePort(process.env.HTTP_PORT || '80')
const { keyPath, certPath } = require('../common/config')
const port = process.env.NODE_ENV === 'development' ? httpPort : httpsPort

/**
 * serve http to redirect to https
 */
if (process.env.NODE_ENV !== 'development') {
  http.createServer((req, res) => {
    res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` })
    res.end()
  }).listen(httpPort)
  console.log(`Using HTTP port ${httpPort}`)
}

/**
 * Get port from environment and store in Express.
 */
app.set('port', port)

/**
 * Create HTTP server.
 */

let server
if (process.env.NODE_ENV === 'development') {
  server = http.createServer(app)
  console.log(`Using HTTP port ${port}`)
} else {
  const options = {
    key: fs.readFileSync(keyPath),
    cert: fs.readFileSync(certPath)
  }
  server = https.createServer(options, app)
  console.log(`Using HTTPS port ${port}`)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
